{"version":3,"sources":["../src/sentence-length.js"],"names":["removeRangeFromString","string","regExpStrings","patterns","map","pattern","result","forEach","replace","defaultOptions","max","exclusionPatterns","module","exports","context","options","maxLength","helper","RuleHelper","Syntax","RuleError","report","Paragraph","node","isChildNode","BlockQuote","isChildrenSingleLinkNode","children","length","type","Link","paragraph","filter","sentence","SentenceSyntax","Sentence","source","StringSource","actualText","toString","sentenceText","actualTextLength","sentenceLength","startLine","loc","start","line"],"mappings":"AAAA;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,SAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,aAAvC,EAAsD;AAClD,MAAMC,QAAQ,GAAGD,aAAa,CAACE,GAAd,CAAkB,UAAAC,OAAO,EAAI;AAC1C,WAAO,uCAAaA,OAAb,CAAP;AACH,GAFgB,CAAjB;AAGA,MAAIC,MAAM,GAAGL,MAAb;AACAE,EAAAA,QAAQ,CAACI,OAAT,CAAiB,UAAAF,OAAO,EAAI;AACxBC,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAeH,OAAf,EAAwB,EAAxB,CAAT;AACH,GAFD;AAGA,SAAOC,MAAP;AACH;;AAED,IAAMG,cAAc,GAAG;AACnBC,EAAAA,GAAG,EAAE,GADc;AAEnB;AACA;AACAC,EAAAA,iBAAiB,EAAE;AAJA,CAAvB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAgC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC7C,MAAMC,SAAS,GAAGD,OAAO,CAACL,GAAR,IAAeD,cAAc,CAACC,GAAhD;AACA,MAAMC,iBAAiB,GAAGI,OAAO,CAACJ,iBAAR,IAA6BF,cAAc,CAACE,iBAAtE;AACA,MAAMM,MAAM,GAAG,IAAIC,8BAAJ,CAAeJ,OAAf,CAAf;AAH6C,MAIrCK,MAJqC,GAIPL,OAJO,CAIrCK,MAJqC;AAAA,MAI7BC,SAJ6B,GAIPN,OAJO,CAI7BM,SAJ6B;AAAA,MAIlBC,MAJkB,GAIPP,OAJO,CAIlBO,MAJkB,EAK7C;;AACA,6BACKF,MAAM,CAACG,SADZ,YACuBC,IADvB,EAC6B;AACrB,QAAIN,MAAM,CAACO,WAAP,CAAmBD,IAAnB,EAAyB,CAACJ,MAAM,CAACM,UAAR,CAAzB,CAAJ,EAAmD;AAC/C;AACH,KAHoB,CAIrB;;;AACA,QAAMC,wBAAwB,GAAGH,IAAI,CAACI,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8BL,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBE,IAAjB,KAA0BV,MAAM,CAACW,IAAhG;;AACA,QAAIJ,wBAAJ,EAA8B;AAC1B;AACH,KARoB,CASrB;;;AACA,QAAMK,SAAS,GAAG,gCAASR,IAAT,CAAlB;AACAQ,IAAAA,SAAS,CAACJ,QAAV,CAAmBK,MAAnB,CAA0B,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACJ,IAAT,KAAkBK,yBAAeC,QAArC;AAAA,KAAlC,EAAiF5B,OAAjF,CAAyF,UAAA0B,QAAQ,EAAI;AACjG,UAAMG,MAAM,GAAG,IAAIC,kCAAJ,CAAiBJ,QAAjB,CAAf;AACA,UAAMK,UAAU,GAAGF,MAAM,CAACG,QAAP,EAAnB;AACA,UAAMC,YAAY,GAAGxC,qBAAqB,CAACsC,UAAD,EAAa3B,iBAAb,CAA1C,CAHiG,CAIjG;;AACA,UAAM8B,gBAAgB,GAAGH,UAAU,CAACV,MAApC;AACA,UAAMc,cAAc,GAAGF,YAAY,CAACZ,MAApC;;AACA,UAAIc,cAAc,GAAG1B,SAArB,EAAgC;AAC5B,YAAM2B,SAAS,GAAGV,QAAQ,CAACW,GAAT,CAAaC,KAAb,CAAmBC,IAArC;AACAzB,QAAAA,MAAM,CACFY,QADE,EAEF,IAAIb,SAAJ,gBAAsBuB,SAAtB,8BACID,cAAc,KAAKD,gBAAnB,aACSC,cADT,wBACqCD,gBADrC,IAEMC,cAHV,sDAIgD1B,SAJhD,qBAKjB0B,cAAc,GAAG1B,SALA,kBAFE,CAAN;AASH;AACJ,KAnBD;AAoBH,GAhCL;AAkCH,CAxCD","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { splitAST, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { createRegExp } from \"@textlint/regexp-string-matcher\";\n\n\nfunction removeRangeFromString(string, regExpStrings) {\n    const patterns = regExpStrings.map(pattern => {\n        return createRegExp(pattern);\n    });\n    let result = string;\n    patterns.forEach(pattern => {\n        result = result.replace(pattern, \"\");\n    });\n    return result;\n}\n\nconst defaultOptions = {\n    max: 100,\n    // The strings that match following patterns is uncount of the sentence\n    // See https://github.com/textlint/regexp-string-matcher\n    exclusionPatterns: []\n};\nmodule.exports = function(context, options = {}) {\n    const maxLength = options.max || defaultOptions.max;\n    const exclusionPatterns = options.exclusionPatterns || defaultOptions.exclusionPatterns;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report } = context;\n    // toPlainText\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            // If a single Link node in the paragraph node, should be ignore the link length\n            const isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;\n            if (isChildrenSingleLinkNode) {\n                return;\n            }\n            // empty break line == split sentence\n            const paragraph = splitAST(node);\n            paragraph.children.filter(sentence => sentence.type === SentenceSyntax.Sentence).forEach(sentence => {\n                const source = new StringSource(sentence);\n                const actualText = source.toString();\n                const sentenceText = removeRangeFromString(actualText, exclusionPatterns);\n                // larger than > 100\n                const actualTextLength = actualText.length;\n                const sentenceLength = sentenceText.length;\n                if (sentenceLength > maxLength) {\n                    const startLine = sentence.loc.start.line;\n                    report(\n                        sentence,\n                        new RuleError(`Line ${startLine} sentence length(${\n                            sentenceLength !== actualTextLength\n                                ? `${sentenceLength}, original:${actualTextLength}`\n                                : sentenceLength\n                            }) exceeds the maximum sentence length of ${maxLength}.\nOver ${sentenceLength - maxLength} characters.`)\n                    );\n                }\n            });\n        }\n    };\n};\n"],"file":"sentence-length.js"}